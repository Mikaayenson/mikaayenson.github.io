<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Learning Cyber Security - Webserver</title><link href="https://mikaayenson.github.io/" rel="alternate"></link><link href="https://mikaayenson.github.io/feeds/webserver.atom.xml" rel="self"></link><id>https://mikaayenson.github.io/</id><updated>2017-12-02T14:54:00-05:00</updated><entry><title>Web Server Attacks</title><link href="https://mikaayenson.github.io/web_attacks.html" rel="alternate"></link><published>2017-12-02T00:00:00-05:00</published><updated>2017-12-02T14:54:00-05:00</updated><author><name>Mika Ayenson</name></author><id>tag:mikaayenson.github.io,2017-12-02:/web_attacks.html</id><summary type="html">&lt;p&gt;Understanding the different types of attacks seen on webservers.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Cyber-Attacks on Web Servers&lt;/h3&gt;
&lt;p&gt;Due to the design of web servers and implementation of the TCP/IP protocol, webservers have vulnerabilities like issues in verification of input data, URL parameter modifications, and session identifier authentication. These types of vulnerabilities lead to numerous attack vectors that traditional network security has a difficult time preventing. For example, there are URL interpretation attacks, SQL Injection attacks, input validation attacks, buffer overflow attacks, impersonation attacks, password-based attacks, denial-of-service attacks, brute force attacks, source code disclosure attacks, cross site scripting attacks, and session hijacking attacks (Mohammad, 2016). Here are five common attacks explained.&lt;/p&gt;
&lt;h3&gt;SQL Injection&lt;/h3&gt;
&lt;p&gt;This is a well-known attack that attempts to modify parameters in the URL to directly interact with the backend database. Unauthorized users can input query-like data into the URL that is later interpreted by the database and used to bypass typical security. &lt;/p&gt;
&lt;h3&gt;Input Validation&lt;/h3&gt;
&lt;p&gt;Adversaries use this type of attack to execute code injected on the webserver. If there is no input validation, users can upload code to the server and then used to retrieve unauthorized information or cause damage to the server. &lt;/p&gt;
&lt;h3&gt;Source Code Disclosure&lt;/h3&gt;
&lt;p&gt;Adversaries at times want to obtain source code of another organization. Once the source code is obtained, it is then reverse engineered to find other vulnerabilities in the website. &lt;/p&gt;
&lt;h3&gt;URL Interpretation&lt;/h3&gt;
&lt;p&gt;This attack is typically called URL poisoning that affects CGI-based websites. Attackers change the semantics of the URL but keep the syntax to that the request is well-formed legitimate URL. This type of attack allows adversaries to gain information that they typically would not have access to. An example of this would be if an adversary changed the URL that contains account information to another users account ID to load their information using their own approved session token.&lt;/p&gt;
&lt;h3&gt;Denial of Service&lt;/h3&gt;
&lt;p&gt;A denial of service (DoS) attack is an attack that prevents legitimate users from interacting with the website by flooding the server with too much data to process in a timely manner. At times DoS attacks can crash the server and cause serious damage to the applications running on the webserver. This type of attack is intentionally used to disrupt and damage services of an organization.&lt;/p&gt;
&lt;p&gt;See: &lt;a href="../pages/raf_references.html"&gt;References&lt;/a&gt;&lt;/p&gt;</content><category term="web"></category><category term="webserver"></category><category term="cyber"></category></entry><entry><title>Web Server Functionality</title><link href="https://mikaayenson.github.io/web_functions.html" rel="alternate"></link><published>2017-12-02T00:00:00-05:00</published><updated>2017-12-02T14:54:00-05:00</updated><author><name>Mika Ayenson</name></author><id>tag:mikaayenson.github.io,2017-12-02:/web_functions.html</id><summary type="html">&lt;p&gt;Understanding what what servers are used for and their core functions.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Web Servers and Functionality.&lt;/h3&gt;
&lt;p&gt;Many organizations have web servers in their organization which provides services and information that customers and internal use on a daily basis.  Mozilla’s developer guide has a great explanation of web servers and their functionality.  Web servers have hardware and software that work together to serve web pages.  In general, web servers store components to a website like Office documents, programs, HTML documents, CSS stylesheets, and JavaScript files.  These files are served to the client by a software web server application that handles how URL’s are interpreted from a browser request.  &lt;/p&gt;
&lt;p&gt;1)    When a user inputs a web address into the browser, the client application divides the URL into the address, path of the content to be retrieved, and protocol. &lt;/p&gt;
&lt;p&gt;2)    If a domain name is supplied in the URL, DNS translates the name into an IP address that represents the actual address of the website. &lt;/p&gt;
&lt;p&gt;3)    The browser then uses the protocol supplied in the URL to communicate with the web server. For example, it could be HTTP, HTTPS, or FTP.&lt;/p&gt;
&lt;p&gt;4)    The web server then uses the request type to send data to the web server or get data from the server. &lt;/p&gt;
&lt;p&gt;5)   For example, if the request type was a GET request, the browser then must convert the retrieved data into HTML that can be presented in the browser and viewed by the user. &lt;/p&gt;
&lt;p&gt;In short, the communication between a client’s browser is the form of requests and responses. See Mozilla’s developer guide for a deep dive on web servers (Duarte, Mills, Patonnier, Pfeiffer &amp;amp; Culloca, 2017).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" class="img-responsive" height="75%" src="https://mikaayenson.github.io/images/web_server10.jpg" width="75%"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;em&gt;Duarte, H., Mills, C., Patonnier, J., Pfeiffer, A., &amp;amp; Culloca, F. (2017). What is a web server?. Mozilla Developer Network. Retrieved 2 December 2017, from https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See: &lt;a href="../pages/raf_references.html"&gt;References&lt;/a&gt;&lt;/p&gt;</content><category term="web"></category><category term="webserver"></category><category term="cyber"></category></entry></feed>